{
    "docs": [
        {
            "location": "/",
            "text": "Working Software Best Practices\n\u00b6\n\n\nThis document provides a baseline knowledge of to-do considerations to create Working Software efectivelly. It is maintained by \nApiumtech\n, and the \nJust Digital Venture Builder\n.\n\n\n\n\nWhat is Working Software?\n\u00b6\n\n\nNowadays, the use of unit test, TDD and SOLID Patterns is been asumed by (good) developers as a must. But... is that enought ? I don't think so... We still need to deliver some piece of an application to the final user.\n\n\nIn a few words... Working Software is that \"something else thing\" that is missing on a customer centric development to really deliver functionality that can be used. Not only Unit Test, TDD and SOLID.\n\n\nThe purpose of this site, is to show you tools, methodologies and good practices to build software that works from all perspectives (software architecture, lean development, continuous integration and quality assurance).\n\n\nWhere to start?\n\u00b6\n\n\n\n\nGeneral Philosopy\n describes the working software mindset\n\n\nFirst Steps Recommendations\n contains examples of good code patterns\n\n\nSOLID Principles\n describes the importance of the SOLID Object Oriented Principles\n\n\nSoftware Architecture\n outlines best practices to build a strong architecture and\n\n\nTest Driven Development\n lists tools for improving code quality, and design software properly\n\n\nTools\n lists sources of information for staying up to date\n\n\n\n\nContributions are welcome!\n\u00b6\n\n\nFeel free to submit a pull request, with anything from small fixes, to full new sections. If you are writing new content, please reference the \ncontributing\n page for guidance on style. \n\n\nSee the \nissues\n for topics that need to be covered or updated. If you have an idea you'd like to discuss, please chat with us in \nGitter\n.\n\n\nIf you've written an article or blog post, please add it to the \nbibliography\n.",
            "title": "Home"
        },
        {
            "location": "/#working-software-best-practices",
            "text": "This document provides a baseline knowledge of to-do considerations to create Working Software efectivelly. It is maintained by  Apiumtech , and the  Just Digital Venture Builder .",
            "title": "Working Software Best Practices"
        },
        {
            "location": "/#what-is-working-software",
            "text": "Nowadays, the use of unit test, TDD and SOLID Patterns is been asumed by (good) developers as a must. But... is that enought ? I don't think so... We still need to deliver some piece of an application to the final user.  In a few words... Working Software is that \"something else thing\" that is missing on a customer centric development to really deliver functionality that can be used. Not only Unit Test, TDD and SOLID.  The purpose of this site, is to show you tools, methodologies and good practices to build software that works from all perspectives (software architecture, lean development, continuous integration and quality assurance).",
            "title": "What is Working Software?"
        },
        {
            "location": "/#where-to-start",
            "text": "General Philosopy  describes the working software mindset  First Steps Recommendations  contains examples of good code patterns  SOLID Principles  describes the importance of the SOLID Object Oriented Principles  Software Architecture  outlines best practices to build a strong architecture and  Test Driven Development  lists tools for improving code quality, and design software properly  Tools  lists sources of information for staying up to date",
            "title": "Where to start?"
        },
        {
            "location": "/#contributions-are-welcome",
            "text": "Feel free to submit a pull request, with anything from small fixes, to full new sections. If you are writing new content, please reference the  contributing  page for guidance on style.   See the  issues  for topics that need to be covered or updated. If you have an idea you'd like to discuss, please chat with us in  Gitter .  If you've written an article or blog post, please add it to the  bibliography .",
            "title": "Contributions are welcome!"
        },
        {
            "location": "/general_philosophy/",
            "text": "Working software programming requires a different engineering mindset than you may be used to. Is a mix between a good programmer, an MVP maker and a responsible QA. Instead, you will need to learn a new philosophy of development:\n\n\nBe a nice programmer\n\u00b6\n\n\n\n\nThe very first step is to be hungry of knownledge and to learn design patters, TDD and SOLID\n\n\nTake care of your work. At the end of the chain, there's an user that will use your application\n\n\nBe focused, your not a robot. Deliver as much quality as you can.\n\n\n\n\nDeliver software that works\n\u00b6\n\n\n\n\nIs better to deliver something small that works perfectly than a lot of non yet working functionalities\n\n\nMake baby steps. Small iterations of test-code-commit-check is a good idea\n\n\nIntegrate frequently and automate as much as you can\n\n\nTalk with the users and make them participate in the process\n\n\n\n\nGo live Ownership\n\u00b6\n\n\n\n\nMake sure all the test suites are green (unit, integration and functional)\n\n\nMake sure all acceptance criteria are met. A good user story comes with acceptance criteria that let us check the main functionality\n\n\nAlthough everything went fine, don't forget manual test, is always necesary.\n\n\nAutomate the deploy process and inform the users, let them choose if they want a demo meeting to get more feeback and make an application that fits their expectations",
            "title": "General Philosophy"
        },
        {
            "location": "/general_philosophy/#be-a-nice-programmer",
            "text": "The very first step is to be hungry of knownledge and to learn design patters, TDD and SOLID  Take care of your work. At the end of the chain, there's an user that will use your application  Be focused, your not a robot. Deliver as much quality as you can.",
            "title": "Be a nice programmer"
        },
        {
            "location": "/general_philosophy/#deliver-software-that-works",
            "text": "Is better to deliver something small that works perfectly than a lot of non yet working functionalities  Make baby steps. Small iterations of test-code-commit-check is a good idea  Integrate frequently and automate as much as you can  Talk with the users and make them participate in the process",
            "title": "Deliver software that works"
        },
        {
            "location": "/general_philosophy/#go-live-ownership",
            "text": "Make sure all the test suites are green (unit, integration and functional)  Make sure all acceptance criteria are met. A good user story comes with acceptance criteria that let us check the main functionality  Although everything went fine, don't forget manual test, is always necesary.  Automate the deploy process and inform the users, let them choose if they want a demo meeting to get more feeback and make an application that fits their expectations",
            "title": "Go live Ownership"
        },
        {
            "location": "/recommendations/",
            "text": "This page demonstrates a number of solidity patterns which should generally be followed when writing smart contracts.\n\n\nClean Code\n\u00b6\n\n\nAny code you make will have errors in it. Your code must, therefore, be able to respond to bugs and vulnerabilities gracefully.\n\n\n\n\nMake readable code, that anyone can understand\n\n\nShare your thoughts with your team\n\n\nBe careful with the \"code smells\"\n\n\n\n\nUnit Test\n\u00b6\n\n\nIt is always better to catch bugs before a full production release. Unit test is the secure net and the first step to become a full-stack developer.\n\n\n\n\nLearn how to make \ngood\n unit test\n\n\nUse the full capabilities of the test frameworks\n\n\nDive into the unit test culture (test doubles, row testing...)\n\n\n\n\nTest Driven Development\n\u00b6\n\n\nTDD is probably the best way to produce working software. Don't forget that TDD is not a testing tool, indeed is a tool to design software that works.\n\n\n\n\nEnsure the contract is simple\n\n\nWrite the test first\n\n\nImplement the production code\n\n\nIf the code is not clean, then refactor\n\n\n\n\nSoftware Seeds\n\u00b6\n\n\nUse the existing resources on the internet to choose a nice seed where to begin to code, then that seed will become part of your corporate seed to build a project.\n\n\n\n\nCheck the seed has everything you need to build working software\n\n\nThe seed will have all the tools around your code (unit test, lints, build, dependencies management, docker, code quality reporters, etc...)\n\n\nImprove your own seed as you develop, to get a strong seed that makes the difference\n\n\n\n\nSoftware Architecture\n\u00b6\n\n\nWhile much of your programming experience is related to micro-architecture and design patterns, think always on how the application is going to grow.\n\n\n\n\nBe extremely careful about constraints that you can have in the future\n\n\nThe best architecture is the architecture than can change. Prepare for change, not for future.\n\n\nWe recomend Domain Driven Design since is not coupled and easy to deploy \nalso\n as microservices\n\n\n\n\nFunctional Testing\n\u00b6\n\n\n\n\nMake a tiny jmeter funcional test on your seed, that so important to involve functional test from the very beginning\n\n\nPrepare the test to be executed\n\n\n\n\nAPI Testing\n\u00b6\n\n\n\n\nthe API test does not need interface, do it with jmeter\n\n\n\n\nAutomated Functional Test\n\u00b6\n\n\n\n\nUse a framework and create a versioned repository for the functional test\n\n\n\n\nThe importante of Manual Test\n\u00b6\n\n\n\n\nDon't thing manual test is not needed on a super stable system, manual test will be always inevitable\n\n\n\n\nContinuous Integration\n\u00b6\n\n\n\n\nIntegration bugs are detected early and are easy to track down due to small change sets. This saves both time and money over the lifespan of a project\n\n\nConstant availability of a \u201ccurrent\u201d build for testing, demo, or release purposes\n\n\nContinuous Integration is quality assurance",
            "title": "Recommendations to start Working Software"
        },
        {
            "location": "/recommendations/#clean-code",
            "text": "Any code you make will have errors in it. Your code must, therefore, be able to respond to bugs and vulnerabilities gracefully.   Make readable code, that anyone can understand  Share your thoughts with your team  Be careful with the \"code smells\"",
            "title": "Clean Code"
        },
        {
            "location": "/recommendations/#unit-test",
            "text": "It is always better to catch bugs before a full production release. Unit test is the secure net and the first step to become a full-stack developer.   Learn how to make  good  unit test  Use the full capabilities of the test frameworks  Dive into the unit test culture (test doubles, row testing...)",
            "title": "Unit Test"
        },
        {
            "location": "/recommendations/#test-driven-development",
            "text": "TDD is probably the best way to produce working software. Don't forget that TDD is not a testing tool, indeed is a tool to design software that works.   Ensure the contract is simple  Write the test first  Implement the production code  If the code is not clean, then refactor",
            "title": "Test Driven Development"
        },
        {
            "location": "/recommendations/#software-seeds",
            "text": "Use the existing resources on the internet to choose a nice seed where to begin to code, then that seed will become part of your corporate seed to build a project.   Check the seed has everything you need to build working software  The seed will have all the tools around your code (unit test, lints, build, dependencies management, docker, code quality reporters, etc...)  Improve your own seed as you develop, to get a strong seed that makes the difference",
            "title": "Software Seeds"
        },
        {
            "location": "/recommendations/#software-architecture",
            "text": "While much of your programming experience is related to micro-architecture and design patterns, think always on how the application is going to grow.   Be extremely careful about constraints that you can have in the future  The best architecture is the architecture than can change. Prepare for change, not for future.  We recomend Domain Driven Design since is not coupled and easy to deploy  also  as microservices",
            "title": "Software Architecture"
        },
        {
            "location": "/recommendations/#functional-testing",
            "text": "Make a tiny jmeter funcional test on your seed, that so important to involve functional test from the very beginning  Prepare the test to be executed",
            "title": "Functional Testing"
        },
        {
            "location": "/recommendations/#api-testing",
            "text": "the API test does not need interface, do it with jmeter",
            "title": "API Testing"
        },
        {
            "location": "/recommendations/#automated-functional-test",
            "text": "Use a framework and create a versioned repository for the functional test",
            "title": "Automated Functional Test"
        },
        {
            "location": "/recommendations/#the-importante-of-manual-test",
            "text": "Don't thing manual test is not needed on a super stable system, manual test will be always inevitable",
            "title": "The importante of Manual Test"
        },
        {
            "location": "/recommendations/#continuous-integration",
            "text": "Integration bugs are detected early and are easy to track down due to small change sets. This saves both time and money over the lifespan of a project  Constant availability of a \u201ccurrent\u201d build for testing, demo, or release purposes  Continuous Integration is quality assurance",
            "title": "Continuous Integration"
        },
        {
            "location": "/software_architecture/",
            "text": "Software Architecture with Domain-Driven Design \n\u00b6\n\n\nWorking Architecture\n\u00b6\n\n\nWhen working on a software project, it is primordial to dedicate time to get a good software architecture, because if you think about, it\u2019s the base of all the projects. To build an emergent, raising architecture with almost infinite scalability, DDD is maybe the Best solution.\n\n\nDomain-Driven Design (DDD)\n is an approach to software development for complex needs by connecting the implementation to an evolving model.  The premise of Domain-Driven Design is the following:\n\n\n\n\nplacing the project's primary focus on the core domain and domain logic\n\n\nbasing complex designs on a model of the domain\n\n\ninitiating a creative collaboration between technical and domain experts to iteratively refine a conceptual model that addresses particular domain problems\n\n\n\n\nThe term was coined by Eric Evans in his book of the same title.\n\n\nCommand Query Responsibility Segregation (CQRS)\n is simply the creation of two objects where there was previously only one. The separation occurs based upon whether the methods are a command or a query (the same definition that is used by Meyer in Command and Query Separation, a command is any method that mutates state and a query is any method that returns a value).\n\n\nEvent Sourcing\n the fundamental idea of Event Sourcing is that of ensuring every change to the state of an application is captured in an event object, and that these event objects are themselves stored in the sequence they were applied for the same lifetime as the application state itself.\n\n\nEvent Storming\n is a workshop format for quickly exploring complex business domains.\n\n\nContents\n\u00b6\n\n\n\n\nBooks\n\n\nTraining Courses\n\n\nVideo Collections\n\n\nCommunity Resources\n\n\nBlogs\n\n\nSample Projects\n\n\nLibraries and Frameworks\n\n\nPodcasts and Interviews\n\n\nConferences\n\n\nUser Groups\n\n\n\n\nBooks\n\u00b6\n\n\n\n\nDomain-Driven Design: Tackling the Complexity at the Heart of Software\n - The canonical book that coined the term Domain-Driven Design.  Also known as the \"Blue Book.\"\n\n\nDDD Reference\n - A summary of the patterns and definitions of DDD.\n\n\nDomain Specific Languages\n - Tangentially connected to DDD, describes the importance of the Ubiquitous Language and working together with domain experts, along with lots of technical details.\n\n\nImplementing Domain-Driven Design\n - Also a canonical book presenting a top-down approach to understanding Domain-Driven Design.  Also known as the \"Red Book.\"\n\n\nDomain-Driven Design Distilled\n - Very good starter book before you read \nImplementing Domain-Driven Design\n or \nDomain-Driven Design: Tackling the Complexity at the Heart of Software\n.\n\n\nPatterns, Principles, and Practices of Domain-Driven Design (1\nst\n Edition)\n - Methods for managing complex software construction following the practices, principles and patterns of Domain-Driven Design with code examples in C#.\n\n\nMicrosoft .NET - Architecting Applications for the Enterprise (2\nnd\n Edition)\n - A software architect\u2019s digest of core practices, pragmatically applied.\n\n\nLiving Documentation by Design, with Domain-Driven Design\n - Discover how a Living Documentation can help you in all aspects of your projects, from the business goals to the business domain knowledge, architecture and design, processes and deployment, even if you hate writing documentation.\n\n\nIntroducing Event Storming: An act of Deliberate Collective Learning\n - The deepest tutorial and explanation about EventStorming, straight from the inventor.\n\n\nThe Anatomy of Domain-Driven Design - The Infographic\n - An infographic on the anatomy of Domain-Driven Design.\n\n\nCQRS Journey\n - Exploring CQRS and Event Sourcing.\n\n\nDomain Driven Design Quickly\n - Domain Driven Design Quickly is a short, quick-readable summary and introduction to the fundamentals of DDD.\n\n\nDomain-Driven Design in PHP\n - Real examples written in PHP showcasing DDD Architectural Styles, Tactical Design, and Bounded Context Integration.\n\n\nCQRS\n - Notes by Mark Nijhof from his experiences learning DDD and CQRS from Greg Young.  There is an extensive sample project that accompanies this book.\n\n\nGetting Started with DDD when Surrounded by Legacy Systems\n - Describes three strategies for getting started with DDD when you have a big commitment to legacy systems.\n\n\nSecure by Design (early access)\n - Shows how to use Domain-Driven Design to avoid security vulnerabilities.\n\n\nApplying Domain Driven Design with CQRS and Event Sourcing\n - A walkthrough of using EventStorming and other modeling techniques to build a CQRS and Event Sourcing-based prototype for a fictional business domain.\n\n\nVersioning in an Event Sourced System\n - Have you had troubles with versioning an Event Sourced system? Just getting into a new Event Sourced system for the first time? This book is the definitive guide of how to handle versioning over long periods of time.\n\n\nWriting Great Specifications\n - Writing Great Specifications is an example-rich tutorial that teaches you how to write good Gherkin specification documents that take advantage of Specification by Example's benefits.\n\n\nThe Semantic JavaScript Backend for Event-Driven Development\n - A 68 pages long free ebook on what DDD, CQRS and event-sourcing are, and how they fit each other.\n\n\nSpecification by Example\n - This book distills from the experience of leading teams worldwide effective ways to specify, test, and deliver software in short, iterative delivery cycles. Case studies in this book range from small web startups to large financial institutions, working in many processes including XP, Scrum, and Kanban.\n\n\nEvent Sourcing and CQRS with .NET Core and SQL Server\n - A walkthrough of using Domain-Driven Design with Event Sourcing and CQRS using ASP.NET Core and SQL Server in production.\n\n\nDomain-Driven Rails\n - Domain-Driven Rails describes 11 techniques (from Bounded Contexts to Event Sourcing) that you can use separately and together in new and old Rails apps to achieve better architecture.\n\n\n\n\nTraining Courses\n\u00b6\n\n\n\n\nDomain Language eLearning\n - Using our video lessons with Eric Evans, author of the original book on Domain-Driven Design (DDD), teach yourself techniques for evolving practical models that improve your software \u2014 not just your documents.\n\n\nGreg Young's CQRS Class\n - These videos include the entirety of Greg Young's DDD, CQRS, and Event Sourcing class.\n\n\nDistilling Domain-Driven Design\n - Vaughn Vernon's online training course.\n\n\nAdvanced Distributed Systems Design\n - Live training from Udi Dahan.  Udi's live training schedule can be found \nhere\n.\n\n\nNomad PHP\n - Introduction to Event Sourcing and CQRS.\n\n\nEvent Sourcery\n - Introduction to DDD, CQRS, and Event Sourcing.\n\n\nMixter\n - CQRS and Event Sourcing Koans.\n\n\nPluralsight\n\n\nDomain-Driven Design Fundamentals\n - Teaches the fundamentals of Domain-Driven Design (DDD) through a demonstration of customer interactions and a complex demo application, along with advice from Eric Evans.\n\n\nDomain-Driven Design in Practice\n - A descriptive, in-depth walk-through for applying Domain-Driven Design principles in practice.\n\n\nModern Software Architecture: Domain Models, CQRS, and Event Sourcing\n - This course covers DDD analysis patterns helpful in discovering the top-level architecture of a business domain. Architects and developers will find details of implementation patterns such as Domain Model, CQRS, and Event Sourcing.\n\n\n\n\n\n\nRails + Domain Driven Design Workshop\n - Introduction to DDD, fundamentals of CQRS & Event Sourcing for Ruby/Rails developers.\n\n\n\n\nVideo Collections\n\u00b6\n\n\n\n\nDDD Europe\n - Recordings of talks given at DDD Europe.\n\n\nSkillsCasts by SkillsMatter\n - Searching DDD returns various talks given by Greg Young, Alberto Brandolini, and Dan North, etc.\n\n\nAlberto Brandolini: Event Storming\n - A YouTube collection of talks given by Alberto Brandolini on Event Storming.\n\n\nGreg Young\n - A YouTube collection of various talks given by Greg Young.\n\n\nExplore DDD videos\n - Recordings of the talks given at the Explore DDD conferece.\n\n\n\n\nCommunity Resources\n\u00b6\n\n\n\n\nDDD/CQRS Google Group\n - An active mailing list and an excellent resource to ask questions and learn fine-grained details about DDD/CQRS.\n\n\nDomain Driven Design Yahoo Group\n - This group is for discussion of the domain-driven style of designing software, and the book by Eric Evans, Domain-Driven Design: Tackling Complexity in the Heart of Business Software. Questions and discussion of the book content is welcome here, as well as sharing of experiences applying DDD, and discussions of the topic in general.\n\n\nDDDinPHP Google Group\n - The place to discuss Domain-Driven Design, CQRS, Event Sourcing, Model Storming, Hexagonal Architecture, Distributed Systems, Reactive... in the context of PHP.\n\n\nDDD in Ruby subreddit\n - A subreddit for Ruby developers interested in Domain-Driven Design.\n\n\nEventStormers Google+ Community\n - A public discussion group for everybody interested in EventStorming, and related themes.\n\n\nDDD/CQRS/ES Slack\n - A slack team for those who want to chat about Domain-Driven Design, CQRS, Event Sourcing and sometimes random things. Main channel is language and framework agnostic.\n\n\nDomain StoryTelling Slack\n - A slack team about Domain StoryTelling. It is currently invite only, but you can ask \n@hofstef\n for an invitation. The homepage is at \ndomainstorytelling.org\n.\n\n\nSoftware Engineering Stack Exchange\n - Software Engineering Stack Exchange questions tagged \ndomain-driven-design\n.\n\n\nCode Review Stack Exchange\n - Code Review Stack Exchange questions tagged \ndomain-driven-design\n.\n\n\nStack Overflow\n - Stack Overflow questions tagged \ndomain-driven-design\n.\n\n\nQuora\n - Questions tagged \ndomain-driven-design\n.\n\n\n\n\nBlogs\n\u00b6\n\n\n\n\nNick Chamberlain\n - Helpful development and design advice for .NET developers.\n\n\nDDD Weekly\n - Weekly curated links related to DDD/CQRS/ES.\n\n\nDaniel Whittaker\n - Want to learn about CQRS and Event Sourcing? This blog is packed with step-by-step articles to give you a head start.\n\n\nCyrille Martraire\n - Being so immersed in finance while still in love with programming, I\u2019m naturally a big fan of Domain-Driven Design by Eric Evans, along with TDD, BDD and agile/XP practices.\n\n\nJimmy Bogard\n - I focus on DDD, distributed systems, and any other acronym-centric design/architecture/methodology.\n\n\nCodeBetter\n - CodeBetter.Com exists in order to help foster awareness of better practices, superior tools, proven methodologies and techniques within the software development community.\n\n\nGreg Young\n - Good Enough Software is By Definition Good Enough.\n\n\nInfoQ Blog\n - Domain-Driven Design Content on InfoQ.\n\n\nDan North\n - Inventor of Behavior-Driven Design.  Blogs and talks about Event Storming also.\n\n\nMike Mogosanu\n - Maintainable code is a business advantage.  Creator of Domain Map: The Domain Modeling Tool - Easy And Powerful Domain Driven Design.\n\n\nChristian Posta\n - Principal Middleware Architect @ Red Hat, open-source enthusiast, committer @ Apache, Cloud, Integration, Kubernetes, Docker, OpenShift, Fabric8.\n\n\nVladimir Khorikov\n - Pluralsight author.  Blogs about software development principles and best practices.\n\n\nTechBeacon\n - Articles on TechBeacon tagged \ndomain driven design\n.\n\n\nDerek Comartin\n - Articles under the category \nDomain Driven Design\n.\n\n\nAlberto Brandolini\n - Inventor of Event Storming. Asserting that problems cannot be solved with the same mindset that originated them, Alberto switches perspective frequently assuming the architect, mentor, coach, manager or developer point of view.\n\n\nJ\u00e9r\u00e9mie Chassaing\n - Various articles about DDD/CQRS.  Implemented Greg Young's SimpleCQRS sample in F#.\n\n\nVaughn Vernon\n - Vaughn Vernon understands the unique demands of software development and the challenges you face as you improve your craft in a fast-paced industry.\n\n\nVladik Khononov\n - Various DDD-related articles.\n\n\nEventsourcing Publications\n - Practical event sourcing.\n\n\nJef Claes\n - Excellent articles and talks on Domain-Driven Design.\n\n\nUdi Dahan\n - From the creator of NServiceBus.\n\n\nChris Patterson\n - From the creator of the MassTransit distributed application framework.\n\n\nAaron Stannard\n - From the CTO and co-founder of Petabridge, developers of the Akka.NET Actor Model framework.\n\n\nRoger Johansson\n - Mostly C#, DDD, and Akka.NET.\n\n\nKonrad Garus\n - Ranting and Programming in Java, Clojure, and JavaScript.  Articles tagged under \ncqrs\n.\n\n\nOasis Digital\n - Content by Oasis Digital tagged under \ncqrs\n.\n\n\nAdaptech\n - Adaptech Solutions blog.  Our founder, Adam Dymitruk, debated the merits of CQRS with Greg Young before Greg coined the term. Adam and business partner Robert Reppel are among the leading practitioners of event-sourced microservices.\n\n\nLev Gorodinski\n - Several articles about DDD from 2013, which are still relevant.\n\n\nDino Esposito\n - Software architect, trainer, book author.  Author of \nMicrosoft .NET - Architecting Applications for the Enterprise (2\nnd\n Edition)\n.\n\n\nDan Bergh Johnsson \"Dear Junior\"\n - Domain-Driven Design mixed with security, and agile in general. Written as fictional letters to a younger programmer.\n\n\nthe native web\n - DDD & Co. series\n\n\nArkency\n - Various DDD, CQRS, Event Sourcing related articles from Ruby experts.\n\n\n\n\nSample Projects\n\u00b6\n\n\n\n\nReactive Trader Cloud\n - Reactive Trader Cloud by Adaptive Consulting.\n\n\nExample of Domain-Driven Design in F#\n - Example of Domain Driven Design for the game of checkers. There are two files: a scratch file with a series of designs, and a final version.\n\n\nSimpleCQRS\n - Greg Young's \"Simplest Thing\" CQRS with Event Sourcing project.\n\n\nCompanion Code for Microsoft .NET Architecting Applications for the Enterprise\n by Dino Esposito.\n\n\nMicrosoft Patterns and Practices: CQRS Journey Sample Code\n - Sample code from CQRS Journey.\n\n\nCQRS-DDD Example\n - Domain Driven Design, CQRS, & Event Sourcing Example using GetEventStore, CommonDomain, NServiceBus, Entity Framework, SQL Server, SignalR.\n\n\nScritchy\n - CQRS without the Plumbing, \nvideo\n.\n\n\nSimple CQRS in F#\n - Greg Young's SimpleCQRS in F#.\n\n\nFsUno\n - Event sourcing implementation sample in F#.\n\n\nIDDD Samples\n - These are the sample Bounded Contexts from the book \"Implementing Domain-Driven Design\" by Vaughn Vernon: \nhttp://vaughnvernon.co/?page_id=168\n.\n\n\nIDDD Samples in .NET\n - These are the sample Bounded Contexts for C#.NET from the book \"Implementing Domain-Driven Design\" by Vaughn Vernon: \nhttp://vaughnvernon.co/?page_id=168\n.\n\n\nAkka CQRS ES Demo\n - Demo project to implement the CQRS and Event Sourcing patterns in Scala-Akka.\n\n\nDDD Leaven\n - DDD-CQRS sample v2.0 project that helps you with starting out advanced domain modeling using Spring, JPA and testing.\n\n\nDDD Playground\n - Sample implementation in PHP.\n\n\nFohjin\n - Example project that accompanies Mark Nijhof's \nCQRS\n book.\n\n\nLokad IDDD Sample\n - This is a .NET Sample Project to accompany Event Sourcing materials from the book by Vaughn Vernon: Implementing Domain-Driven Design.\n\n\nContosoUniversityCore\n - ContosoUniversity on ASP.NET Core with Full .NET Framework.\n\n\nDDDSkeletonNet\n (C#) - a .NET skeleton project to introduce the concepts of Domain Driven Design and loosely coupled layers.\n\n\nEvent Sourcing Example\n (Java) - A simplified (in memory) example of Event Sourcing and CQRS implementation for Java code (modeled for banking domain use cases).\n\n\nEvent Sourcing and CQRS Examples\n - A pragmatic application of Event Sourcing and CQRS in Java with good references for common related problems, e.g. event ordering and idempotency.\n\n\nDDD Wish List\n - A sample application in PHP built with Symfony 3 and Vue.js.\n\n\nEvent Sourcing and CQRS Sample\n - Sample event sourced application with Command Query Responsibility Segregation\n\n\nwolkenkit-todomvc\n - TodoMVC built with DDD, CQRS and event-sourcing\n\n\n\n\nLibraries and Frameworks\n\u00b6\n\n\n\n\nEvent Store\n - The open-source, functional database with Complex Event Processing in JavaScript.\n\n\nAxon Framework\n - The axon framework is focused on making life easier for developers that want to create a java application based on the CQRS principles.\n\n\nMessageRouter\n - Described in this video: \nThe Beating Heart of CQRS, or Actor-Based Message Routing on the CLR\n by Paulmichael Blasucci at the New York F# .NET User Group.\n\n\nNEventStore\n - A persistence library used to abstract different storage implementations when using event sourcing as storage mechanism.\n\n\nProjac\n - Projac is a set of projection libraries that allow you to write projections targetting various backing stores.\n\n\nStreamstone\n - Event Store for Azure Table Storage.\n\n\nValue\n - Help you to easily implement Value Types in your C# projects without making errors nor polluting your domain logic with boiler-plate code.\n\n\nCirqus\n - d60 event sourcing + CQRS framework.\n\n\nIts.Cqrs\n - A set of libraries for CQRS and Event Sourcing, with a Domain-Driven Design flavor.\n\n\nAggregateSource\n - Lightweight infrastructure for doing eventsourcing using aggregates.\n\n\nJESA\n -  Event sourced aggregates for Java.\n\n\nEventFlow\n - Async/await first CQRS+ES and DDD framework for .NET \nhttp://geteventflow.net/\n.\n\n\ncqrs.js\n - CQRS implementations in node.js.  Includes \nnode-eventstore\n, \nnode-cqrs-domain\n, \nnode-eventdenormalizer\n, \nnode-cqrs-saga\n.\n\n\nEventsourcing\n - Business event capture and querying framework.\n\n\nCQRS on Azure\n CQRS on Windows Azure.\n\n\nSeedStack's Business Framework\n - A set of building blocks that enable you to code business logic according to the Domain-Driven Design (DDD) approach.\n\n\nSqlStreamStore\n - .NET Stream Store library targeting SQL based implementations.\n\n\nCedar.CommandHandling\n - Middleware to handling commands over HTTP; typically used in CQRS applications.\n\n\nNServiceBus\n - Service bus for .NET.\n\n\nMassTransit\n - Distributed Application Framework for .NET.\n\n\nAkka.NET\n - Akka.NET is a toolkit and runtime for building highly concurrent, distributed, and fault tolerant event-driven applications on .NET & Mono.\n\n\nASP.NET Boilerplate\n - ASP.NET MVC, Web API and ASP.NET Core based application framework to create NLayered, Domain Driven Designed web Applications implementing best practices.\n\n\nAggregates.NET\n - .NET event sourced domain driven design model via NServicebus and GetEventStore.\n\n\nStringly.Typed\n - Making it easier to convert strings to/from .NET types.\n\n\nCommanded\n - Command handling middleware for CQRS/ES applications, Pure Functional Data Structures for Aggregates and Process Managers, Point-to-Point message routing, and much more in Elixir (Erlang VM) - All in Actor concurrency model.\n\n\nakka-ddd\n - Reusable artifacts for building applications on top of the Akka platform following CQRS/DDDD-based approach.\n\n\neventstore\n - CQRS event store using PostgreSQL for persistence.\n\n\nNode API Boilerplate\n - NodeJS web API boilerplate for DDD and Clean Architecture applications.\n\n\nwolkenkit\n - A CQRS, DDD, and event-sourcing framework for JavaScript and Node.js.\n\n\nBroadway\n - Broadway is a (PHP) project providing infrastructure and testing helpers for creating CQRS and event sourced applications.\n\n\nshriek-fx\n - An simple,elegant and useful Domain-Driven Design and CQRS framework developed using .NET Core 2.0.\n\n\nRails Event Store\n - Rails Event Store (RES) is a library for publishing, consuming, storing and retrieving events. It's your best companion for going with an event-driven architecture for your Rails application.\n\n\n\n\nPodcasts and Interviews\n\u00b6\n\n\n\n\nDeeper into DDD on DotNetRocks with David Real\n - 11 June 2015.\n\n\nThinking in DDD on DotNetRocks with Julie Lerman and Steve Smith\n - 19 August 2014.\n\n\nEric Evans on Domain Driven Design on DotNetRocks\n - 10 May 2007.\n\n\nJimmy Nilsson on Domain Driven Design on DotNetRocks\n - 29 August 2006.\n\n\nBeing the Worst\n - 2012 thru 2016.\n\n\nSoftware Engineering Radio Episode 225: Eric Evans on Domain-Driven Design at 10 Years\n - 13 May 2015.\n\n\nSoftware Engineering Radio Episode 218: Udi Dahan on CQRS (Command Query Responsibility Segregation)\n - 30 January 2015.\n\n\n\n\nConferences\n\u00b6\n\n\n\n\nDomain-Driven Design Europe - Netherlands\n\n\nExplore DDD - USA\n\n\nKandddinsky - Germany\n\n\n\n\nUser Groups\n\u00b6\n\n\n\n\nBelgium\n\n\nBerlin\n\n\nCologne/Bonn\n\n\nDenver\n\n\nGreece\n\n\nHamburg\n\n\nKrak\u00f3w\n\n\nLondon\n\n\nMunich\n\n\nNederland\n\n\nNorway\n\n\nPhoenix\n\n\nWroclaw",
            "title": "Software Architecture"
        },
        {
            "location": "/software_architecture/#software-architecture-with-domain-driven-design",
            "text": "",
            "title": "Software Architecture with Domain-Driven Design"
        },
        {
            "location": "/software_architecture/#working-architecture",
            "text": "When working on a software project, it is primordial to dedicate time to get a good software architecture, because if you think about, it\u2019s the base of all the projects. To build an emergent, raising architecture with almost infinite scalability, DDD is maybe the Best solution.  Domain-Driven Design (DDD)  is an approach to software development for complex needs by connecting the implementation to an evolving model.  The premise of Domain-Driven Design is the following:   placing the project's primary focus on the core domain and domain logic  basing complex designs on a model of the domain  initiating a creative collaboration between technical and domain experts to iteratively refine a conceptual model that addresses particular domain problems   The term was coined by Eric Evans in his book of the same title.  Command Query Responsibility Segregation (CQRS)  is simply the creation of two objects where there was previously only one. The separation occurs based upon whether the methods are a command or a query (the same definition that is used by Meyer in Command and Query Separation, a command is any method that mutates state and a query is any method that returns a value).  Event Sourcing  the fundamental idea of Event Sourcing is that of ensuring every change to the state of an application is captured in an event object, and that these event objects are themselves stored in the sequence they were applied for the same lifetime as the application state itself.  Event Storming  is a workshop format for quickly exploring complex business domains.",
            "title": "Working Architecture"
        },
        {
            "location": "/software_architecture/#contents",
            "text": "Books  Training Courses  Video Collections  Community Resources  Blogs  Sample Projects  Libraries and Frameworks  Podcasts and Interviews  Conferences  User Groups",
            "title": "Contents"
        },
        {
            "location": "/software_architecture/#books",
            "text": "Domain-Driven Design: Tackling the Complexity at the Heart of Software  - The canonical book that coined the term Domain-Driven Design.  Also known as the \"Blue Book.\"  DDD Reference  - A summary of the patterns and definitions of DDD.  Domain Specific Languages  - Tangentially connected to DDD, describes the importance of the Ubiquitous Language and working together with domain experts, along with lots of technical details.  Implementing Domain-Driven Design  - Also a canonical book presenting a top-down approach to understanding Domain-Driven Design.  Also known as the \"Red Book.\"  Domain-Driven Design Distilled  - Very good starter book before you read  Implementing Domain-Driven Design  or  Domain-Driven Design: Tackling the Complexity at the Heart of Software .  Patterns, Principles, and Practices of Domain-Driven Design (1 st  Edition)  - Methods for managing complex software construction following the practices, principles and patterns of Domain-Driven Design with code examples in C#.  Microsoft .NET - Architecting Applications for the Enterprise (2 nd  Edition)  - A software architect\u2019s digest of core practices, pragmatically applied.  Living Documentation by Design, with Domain-Driven Design  - Discover how a Living Documentation can help you in all aspects of your projects, from the business goals to the business domain knowledge, architecture and design, processes and deployment, even if you hate writing documentation.  Introducing Event Storming: An act of Deliberate Collective Learning  - The deepest tutorial and explanation about EventStorming, straight from the inventor.  The Anatomy of Domain-Driven Design - The Infographic  - An infographic on the anatomy of Domain-Driven Design.  CQRS Journey  - Exploring CQRS and Event Sourcing.  Domain Driven Design Quickly  - Domain Driven Design Quickly is a short, quick-readable summary and introduction to the fundamentals of DDD.  Domain-Driven Design in PHP  - Real examples written in PHP showcasing DDD Architectural Styles, Tactical Design, and Bounded Context Integration.  CQRS  - Notes by Mark Nijhof from his experiences learning DDD and CQRS from Greg Young.  There is an extensive sample project that accompanies this book.  Getting Started with DDD when Surrounded by Legacy Systems  - Describes three strategies for getting started with DDD when you have a big commitment to legacy systems.  Secure by Design (early access)  - Shows how to use Domain-Driven Design to avoid security vulnerabilities.  Applying Domain Driven Design with CQRS and Event Sourcing  - A walkthrough of using EventStorming and other modeling techniques to build a CQRS and Event Sourcing-based prototype for a fictional business domain.  Versioning in an Event Sourced System  - Have you had troubles with versioning an Event Sourced system? Just getting into a new Event Sourced system for the first time? This book is the definitive guide of how to handle versioning over long periods of time.  Writing Great Specifications  - Writing Great Specifications is an example-rich tutorial that teaches you how to write good Gherkin specification documents that take advantage of Specification by Example's benefits.  The Semantic JavaScript Backend for Event-Driven Development  - A 68 pages long free ebook on what DDD, CQRS and event-sourcing are, and how they fit each other.  Specification by Example  - This book distills from the experience of leading teams worldwide effective ways to specify, test, and deliver software in short, iterative delivery cycles. Case studies in this book range from small web startups to large financial institutions, working in many processes including XP, Scrum, and Kanban.  Event Sourcing and CQRS with .NET Core and SQL Server  - A walkthrough of using Domain-Driven Design with Event Sourcing and CQRS using ASP.NET Core and SQL Server in production.  Domain-Driven Rails  - Domain-Driven Rails describes 11 techniques (from Bounded Contexts to Event Sourcing) that you can use separately and together in new and old Rails apps to achieve better architecture.",
            "title": "Books"
        },
        {
            "location": "/software_architecture/#training-courses",
            "text": "Domain Language eLearning  - Using our video lessons with Eric Evans, author of the original book on Domain-Driven Design (DDD), teach yourself techniques for evolving practical models that improve your software \u2014 not just your documents.  Greg Young's CQRS Class  - These videos include the entirety of Greg Young's DDD, CQRS, and Event Sourcing class.  Distilling Domain-Driven Design  - Vaughn Vernon's online training course.  Advanced Distributed Systems Design  - Live training from Udi Dahan.  Udi's live training schedule can be found  here .  Nomad PHP  - Introduction to Event Sourcing and CQRS.  Event Sourcery  - Introduction to DDD, CQRS, and Event Sourcing.  Mixter  - CQRS and Event Sourcing Koans.  Pluralsight  Domain-Driven Design Fundamentals  - Teaches the fundamentals of Domain-Driven Design (DDD) through a demonstration of customer interactions and a complex demo application, along with advice from Eric Evans.  Domain-Driven Design in Practice  - A descriptive, in-depth walk-through for applying Domain-Driven Design principles in practice.  Modern Software Architecture: Domain Models, CQRS, and Event Sourcing  - This course covers DDD analysis patterns helpful in discovering the top-level architecture of a business domain. Architects and developers will find details of implementation patterns such as Domain Model, CQRS, and Event Sourcing.    Rails + Domain Driven Design Workshop  - Introduction to DDD, fundamentals of CQRS & Event Sourcing for Ruby/Rails developers.",
            "title": "Training Courses"
        },
        {
            "location": "/software_architecture/#video-collections",
            "text": "DDD Europe  - Recordings of talks given at DDD Europe.  SkillsCasts by SkillsMatter  - Searching DDD returns various talks given by Greg Young, Alberto Brandolini, and Dan North, etc.  Alberto Brandolini: Event Storming  - A YouTube collection of talks given by Alberto Brandolini on Event Storming.  Greg Young  - A YouTube collection of various talks given by Greg Young.  Explore DDD videos  - Recordings of the talks given at the Explore DDD conferece.",
            "title": "Video Collections"
        },
        {
            "location": "/software_architecture/#community-resources",
            "text": "DDD/CQRS Google Group  - An active mailing list and an excellent resource to ask questions and learn fine-grained details about DDD/CQRS.  Domain Driven Design Yahoo Group  - This group is for discussion of the domain-driven style of designing software, and the book by Eric Evans, Domain-Driven Design: Tackling Complexity in the Heart of Business Software. Questions and discussion of the book content is welcome here, as well as sharing of experiences applying DDD, and discussions of the topic in general.  DDDinPHP Google Group  - The place to discuss Domain-Driven Design, CQRS, Event Sourcing, Model Storming, Hexagonal Architecture, Distributed Systems, Reactive... in the context of PHP.  DDD in Ruby subreddit  - A subreddit for Ruby developers interested in Domain-Driven Design.  EventStormers Google+ Community  - A public discussion group for everybody interested in EventStorming, and related themes.  DDD/CQRS/ES Slack  - A slack team for those who want to chat about Domain-Driven Design, CQRS, Event Sourcing and sometimes random things. Main channel is language and framework agnostic.  Domain StoryTelling Slack  - A slack team about Domain StoryTelling. It is currently invite only, but you can ask  @hofstef  for an invitation. The homepage is at  domainstorytelling.org .  Software Engineering Stack Exchange  - Software Engineering Stack Exchange questions tagged  domain-driven-design .  Code Review Stack Exchange  - Code Review Stack Exchange questions tagged  domain-driven-design .  Stack Overflow  - Stack Overflow questions tagged  domain-driven-design .  Quora  - Questions tagged  domain-driven-design .",
            "title": "Community Resources"
        },
        {
            "location": "/software_architecture/#blogs",
            "text": "Nick Chamberlain  - Helpful development and design advice for .NET developers.  DDD Weekly  - Weekly curated links related to DDD/CQRS/ES.  Daniel Whittaker  - Want to learn about CQRS and Event Sourcing? This blog is packed with step-by-step articles to give you a head start.  Cyrille Martraire  - Being so immersed in finance while still in love with programming, I\u2019m naturally a big fan of Domain-Driven Design by Eric Evans, along with TDD, BDD and agile/XP practices.  Jimmy Bogard  - I focus on DDD, distributed systems, and any other acronym-centric design/architecture/methodology.  CodeBetter  - CodeBetter.Com exists in order to help foster awareness of better practices, superior tools, proven methodologies and techniques within the software development community.  Greg Young  - Good Enough Software is By Definition Good Enough.  InfoQ Blog  - Domain-Driven Design Content on InfoQ.  Dan North  - Inventor of Behavior-Driven Design.  Blogs and talks about Event Storming also.  Mike Mogosanu  - Maintainable code is a business advantage.  Creator of Domain Map: The Domain Modeling Tool - Easy And Powerful Domain Driven Design.  Christian Posta  - Principal Middleware Architect @ Red Hat, open-source enthusiast, committer @ Apache, Cloud, Integration, Kubernetes, Docker, OpenShift, Fabric8.  Vladimir Khorikov  - Pluralsight author.  Blogs about software development principles and best practices.  TechBeacon  - Articles on TechBeacon tagged  domain driven design .  Derek Comartin  - Articles under the category  Domain Driven Design .  Alberto Brandolini  - Inventor of Event Storming. Asserting that problems cannot be solved with the same mindset that originated them, Alberto switches perspective frequently assuming the architect, mentor, coach, manager or developer point of view.  J\u00e9r\u00e9mie Chassaing  - Various articles about DDD/CQRS.  Implemented Greg Young's SimpleCQRS sample in F#.  Vaughn Vernon  - Vaughn Vernon understands the unique demands of software development and the challenges you face as you improve your craft in a fast-paced industry.  Vladik Khononov  - Various DDD-related articles.  Eventsourcing Publications  - Practical event sourcing.  Jef Claes  - Excellent articles and talks on Domain-Driven Design.  Udi Dahan  - From the creator of NServiceBus.  Chris Patterson  - From the creator of the MassTransit distributed application framework.  Aaron Stannard  - From the CTO and co-founder of Petabridge, developers of the Akka.NET Actor Model framework.  Roger Johansson  - Mostly C#, DDD, and Akka.NET.  Konrad Garus  - Ranting and Programming in Java, Clojure, and JavaScript.  Articles tagged under  cqrs .  Oasis Digital  - Content by Oasis Digital tagged under  cqrs .  Adaptech  - Adaptech Solutions blog.  Our founder, Adam Dymitruk, debated the merits of CQRS with Greg Young before Greg coined the term. Adam and business partner Robert Reppel are among the leading practitioners of event-sourced microservices.  Lev Gorodinski  - Several articles about DDD from 2013, which are still relevant.  Dino Esposito  - Software architect, trainer, book author.  Author of  Microsoft .NET - Architecting Applications for the Enterprise (2 nd  Edition) .  Dan Bergh Johnsson \"Dear Junior\"  - Domain-Driven Design mixed with security, and agile in general. Written as fictional letters to a younger programmer.  the native web  - DDD & Co. series  Arkency  - Various DDD, CQRS, Event Sourcing related articles from Ruby experts.",
            "title": "Blogs"
        },
        {
            "location": "/software_architecture/#sample-projects",
            "text": "Reactive Trader Cloud  - Reactive Trader Cloud by Adaptive Consulting.  Example of Domain-Driven Design in F#  - Example of Domain Driven Design for the game of checkers. There are two files: a scratch file with a series of designs, and a final version.  SimpleCQRS  - Greg Young's \"Simplest Thing\" CQRS with Event Sourcing project.  Companion Code for Microsoft .NET Architecting Applications for the Enterprise  by Dino Esposito.  Microsoft Patterns and Practices: CQRS Journey Sample Code  - Sample code from CQRS Journey.  CQRS-DDD Example  - Domain Driven Design, CQRS, & Event Sourcing Example using GetEventStore, CommonDomain, NServiceBus, Entity Framework, SQL Server, SignalR.  Scritchy  - CQRS without the Plumbing,  video .  Simple CQRS in F#  - Greg Young's SimpleCQRS in F#.  FsUno  - Event sourcing implementation sample in F#.  IDDD Samples  - These are the sample Bounded Contexts from the book \"Implementing Domain-Driven Design\" by Vaughn Vernon:  http://vaughnvernon.co/?page_id=168 .  IDDD Samples in .NET  - These are the sample Bounded Contexts for C#.NET from the book \"Implementing Domain-Driven Design\" by Vaughn Vernon:  http://vaughnvernon.co/?page_id=168 .  Akka CQRS ES Demo  - Demo project to implement the CQRS and Event Sourcing patterns in Scala-Akka.  DDD Leaven  - DDD-CQRS sample v2.0 project that helps you with starting out advanced domain modeling using Spring, JPA and testing.  DDD Playground  - Sample implementation in PHP.  Fohjin  - Example project that accompanies Mark Nijhof's  CQRS  book.  Lokad IDDD Sample  - This is a .NET Sample Project to accompany Event Sourcing materials from the book by Vaughn Vernon: Implementing Domain-Driven Design.  ContosoUniversityCore  - ContosoUniversity on ASP.NET Core with Full .NET Framework.  DDDSkeletonNet  (C#) - a .NET skeleton project to introduce the concepts of Domain Driven Design and loosely coupled layers.  Event Sourcing Example  (Java) - A simplified (in memory) example of Event Sourcing and CQRS implementation for Java code (modeled for banking domain use cases).  Event Sourcing and CQRS Examples  - A pragmatic application of Event Sourcing and CQRS in Java with good references for common related problems, e.g. event ordering and idempotency.  DDD Wish List  - A sample application in PHP built with Symfony 3 and Vue.js.  Event Sourcing and CQRS Sample  - Sample event sourced application with Command Query Responsibility Segregation  wolkenkit-todomvc  - TodoMVC built with DDD, CQRS and event-sourcing",
            "title": "Sample Projects"
        },
        {
            "location": "/software_architecture/#libraries-and-frameworks",
            "text": "Event Store  - The open-source, functional database with Complex Event Processing in JavaScript.  Axon Framework  - The axon framework is focused on making life easier for developers that want to create a java application based on the CQRS principles.  MessageRouter  - Described in this video:  The Beating Heart of CQRS, or Actor-Based Message Routing on the CLR  by Paulmichael Blasucci at the New York F# .NET User Group.  NEventStore  - A persistence library used to abstract different storage implementations when using event sourcing as storage mechanism.  Projac  - Projac is a set of projection libraries that allow you to write projections targetting various backing stores.  Streamstone  - Event Store for Azure Table Storage.  Value  - Help you to easily implement Value Types in your C# projects without making errors nor polluting your domain logic with boiler-plate code.  Cirqus  - d60 event sourcing + CQRS framework.  Its.Cqrs  - A set of libraries for CQRS and Event Sourcing, with a Domain-Driven Design flavor.  AggregateSource  - Lightweight infrastructure for doing eventsourcing using aggregates.  JESA  -  Event sourced aggregates for Java.  EventFlow  - Async/await first CQRS+ES and DDD framework for .NET  http://geteventflow.net/ .  cqrs.js  - CQRS implementations in node.js.  Includes  node-eventstore ,  node-cqrs-domain ,  node-eventdenormalizer ,  node-cqrs-saga .  Eventsourcing  - Business event capture and querying framework.  CQRS on Azure  CQRS on Windows Azure.  SeedStack's Business Framework  - A set of building blocks that enable you to code business logic according to the Domain-Driven Design (DDD) approach.  SqlStreamStore  - .NET Stream Store library targeting SQL based implementations.  Cedar.CommandHandling  - Middleware to handling commands over HTTP; typically used in CQRS applications.  NServiceBus  - Service bus for .NET.  MassTransit  - Distributed Application Framework for .NET.  Akka.NET  - Akka.NET is a toolkit and runtime for building highly concurrent, distributed, and fault tolerant event-driven applications on .NET & Mono.  ASP.NET Boilerplate  - ASP.NET MVC, Web API and ASP.NET Core based application framework to create NLayered, Domain Driven Designed web Applications implementing best practices.  Aggregates.NET  - .NET event sourced domain driven design model via NServicebus and GetEventStore.  Stringly.Typed  - Making it easier to convert strings to/from .NET types.  Commanded  - Command handling middleware for CQRS/ES applications, Pure Functional Data Structures for Aggregates and Process Managers, Point-to-Point message routing, and much more in Elixir (Erlang VM) - All in Actor concurrency model.  akka-ddd  - Reusable artifacts for building applications on top of the Akka platform following CQRS/DDDD-based approach.  eventstore  - CQRS event store using PostgreSQL for persistence.  Node API Boilerplate  - NodeJS web API boilerplate for DDD and Clean Architecture applications.  wolkenkit  - A CQRS, DDD, and event-sourcing framework for JavaScript and Node.js.  Broadway  - Broadway is a (PHP) project providing infrastructure and testing helpers for creating CQRS and event sourced applications.  shriek-fx  - An simple,elegant and useful Domain-Driven Design and CQRS framework developed using .NET Core 2.0.  Rails Event Store  - Rails Event Store (RES) is a library for publishing, consuming, storing and retrieving events. It's your best companion for going with an event-driven architecture for your Rails application.",
            "title": "Libraries and Frameworks"
        },
        {
            "location": "/software_architecture/#podcasts-and-interviews",
            "text": "Deeper into DDD on DotNetRocks with David Real  - 11 June 2015.  Thinking in DDD on DotNetRocks with Julie Lerman and Steve Smith  - 19 August 2014.  Eric Evans on Domain Driven Design on DotNetRocks  - 10 May 2007.  Jimmy Nilsson on Domain Driven Design on DotNetRocks  - 29 August 2006.  Being the Worst  - 2012 thru 2016.  Software Engineering Radio Episode 225: Eric Evans on Domain-Driven Design at 10 Years  - 13 May 2015.  Software Engineering Radio Episode 218: Udi Dahan on CQRS (Command Query Responsibility Segregation)  - 30 January 2015.",
            "title": "Podcasts and Interviews"
        },
        {
            "location": "/software_architecture/#conferences",
            "text": "Domain-Driven Design Europe - Netherlands  Explore DDD - USA  Kandddinsky - Germany",
            "title": "Conferences"
        },
        {
            "location": "/software_architecture/#user-groups",
            "text": "Belgium  Berlin  Cologne/Bonn  Denver  Greece  Hamburg  Krak\u00f3w  London  Munich  Nederland  Norway  Phoenix  Wroclaw",
            "title": "User Groups"
        },
        {
            "location": "/test_driven_development/",
            "text": "When I first heard about TDD, the idea seemed to be pretty simple. Just by doing a little word swizzling, obviously TDD is when you have tests that drive your software development.\n\n\nThe TDD stages:\n\u00b6\n\n\n\n\nFirst the developer writes one tests.\n\n\nThe developer then runs those tests and (obviously) they fail because none of those features are actually implemented.\n\n\nNext the developer actually implements those tests in code.\n\n\nIf the developer writes their code well, then the in next stage they will see that their tests pass.\n\n\nThe developer can then refactor their code, refactor by patterns and with focus on DDD.",
            "title": "Test Driven Development"
        },
        {
            "location": "/test_driven_development/#the-tdd-stages",
            "text": "First the developer writes one tests.  The developer then runs those tests and (obviously) they fail because none of those features are actually implemented.  Next the developer actually implements those tests in code.  If the developer writes their code well, then the in next stage they will see that their tests pass.  The developer can then refactor their code, refactor by patterns and with focus on DDD.",
            "title": "The TDD stages:"
        },
        {
            "location": "/working_software_tools/",
            "text": "Continuous integration\n\u00b6\n\n\n\n\nJob DSL plugin\n\n\nBuild Pipeline plugin\n\n\nDelivery Pipeline plugin\n\n\nCopy Artifact Plugin\n\n\nJIRA Plugin for Jenkins\n\n\n\n\nFunctional Test\n\u00b6\n\n\n\n\nSelenium\n\n\nCucumber\n\n\nSerenity BDD\n\n\n\n\nStatic Analysis\n\u00b6\n\n\n\n\nSonarqube\n\n\n\n\nTest Coverage\n\u00b6\n\n\n\n\nCobertura\n - Code coverage for java testing.\n\n\n\n\nLinters\n\u00b6\n\n\nLinters improve code quality by enforcing rules for style and composition, making code easier to read and review.\n\n\n\n\neslint\n - A fully pluggable tool for identifying and reporting on patterns in JavaScript.\n\n\njshint\n - JSHint is a tool that helps to detect errors and potential problems in your JavaScript code.",
            "title": "Working Software Tools"
        },
        {
            "location": "/working_software_tools/#continuous-integration",
            "text": "Job DSL plugin  Build Pipeline plugin  Delivery Pipeline plugin  Copy Artifact Plugin  JIRA Plugin for Jenkins",
            "title": "Continuous integration"
        },
        {
            "location": "/working_software_tools/#functional-test",
            "text": "Selenium  Cucumber  Serenity BDD",
            "title": "Functional Test"
        },
        {
            "location": "/working_software_tools/#static-analysis",
            "text": "Sonarqube",
            "title": "Static Analysis"
        },
        {
            "location": "/working_software_tools/#test-coverage",
            "text": "Cobertura  - Code coverage for java testing.",
            "title": "Test Coverage"
        },
        {
            "location": "/working_software_tools/#linters",
            "text": "Linters improve code quality by enforcing rules for style and composition, making code easier to read and review.   eslint  - A fully pluggable tool for identifying and reporting on patterns in JavaScript.  jshint  - JSHint is a tool that helps to detect errors and potential problems in your JavaScript code.",
            "title": "Linters"
        },
        {
            "location": "/solid_principles/",
            "text": "The term SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable.\nThe principles are a subset of many principles promoted by Robert C. Martin.\nThough they apply to any object-oriented design, the SOLID principles can also form a core philosophy for methodologies such as agile development or Adaptive Software Development.\n\n\nS.O.L.I.D. Principles\n\u00b6\n\n\n\n\nS - Single-responsiblity principle\n\n\nO - Open-closed principle\n\n\nL - Liskov substitution principle\n\n\nI - Interface segregation principle\n\n\nD - Dependency Inversion Principle\n\n\n\n\nSingle-responsiblity principle\n\u00b6\n\n\n\n\nA class should have one and only one reason to change, meaning that a class should have only one job.\n\n\n\n\nOpen-closed principle\n\u00b6\n\n\n\n\nObjects or entities should be open for extension, but closed for modification.\n\n\n\n\nLiskov substitution principle\n\u00b6\n\n\n\n\nLet q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.\n\n\n\n\nInterface segregation principle\n\u00b6\n\n\n\n\nA client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.\n\n\n\n\nDependency Inversion Principle\n\u00b6\n\n\n\n\nEntities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.",
            "title": "Solid Principles"
        },
        {
            "location": "/solid_principles/#solid-principles",
            "text": "S - Single-responsiblity principle  O - Open-closed principle  L - Liskov substitution principle  I - Interface segregation principle  D - Dependency Inversion Principle",
            "title": "S.O.L.I.D. Principles"
        },
        {
            "location": "/solid_principles/#single-responsiblity-principle",
            "text": "A class should have one and only one reason to change, meaning that a class should have only one job.",
            "title": "Single-responsiblity principle"
        },
        {
            "location": "/solid_principles/#open-closed-principle",
            "text": "Objects or entities should be open for extension, but closed for modification.",
            "title": "Open-closed principle"
        },
        {
            "location": "/solid_principles/#liskov-substitution-principle",
            "text": "Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.",
            "title": "Liskov substitution principle"
        },
        {
            "location": "/solid_principles/#interface-segregation-principle",
            "text": "A client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.",
            "title": "Interface segregation principle"
        },
        {
            "location": "/solid_principles/#dependency-inversion-principle",
            "text": "Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.",
            "title": "Dependency Inversion Principle"
        },
        {
            "location": "/future_improvements/",
            "text": "Use of Artificial Intelligence\n\u00b6\n\n\n\n\nWarning\n\n\nThis page is in progress, not finish yet\n\n\n\n\nAI give certain guarantees over repetitive processes...",
            "title": "Future improvements"
        },
        {
            "location": "/future_improvements/#use-of-artificial-intelligence",
            "text": "Warning  This page is in progress, not finish yet   AI give certain guarantees over repetitive processes...",
            "title": "Use of Artificial Intelligence"
        },
        {
            "location": "/bibliography/",
            "text": "A lot of this document contains code, examples and insights gained from various parts already written by the community.\nHere are some of them.  Feel free to add more.\n\n\nBy Apiumtech and JustDigital core developers\n\u00b6\n\n\n\n\nWhat are the benefits of TDD in software development?\n (Xavi Hidalgo)\n\n\nHow to become a software developer\n (Xavi Hidalgo)\n\n\n5 best Jenkins plugins recommended by our team\n (Xavi Hidalgo)\n\n\nA day at the Test Academy event in Barcelona\n (Xavi Hidalgo)\n\n\nA framework to communicate: BDD\n (Xavi Hidalgo)\n\n\nAgile development in 2017\n (Xavi Hidalgo)\n\n\nOf Gods and Procrastination. Agile management.\n (R.P.)\n\n\nTesting tips for beginners in Agile testing\n (Xavi Hidalgo)\n\n\nFunctional debt vs. technical debt in software development\n (R.P.)\n\n\nBDD: User Interface Testing\n (Xavi Hidalgo)\n\n\nLess Is More \u2013 Minimum Viable Product\n (Xavi Hidalgo)\n\n\nUser stories: what you should know\n (Dieu Le)\n\n\nKeep calm & hide your code: code encapsulation.\n (R.P.)\n\n\nOn the way to Continuous Integration (CI) \n (Xavi Hidalgo)\n\n\n\n\nBy Community\n\u00b6\n\n\n\n\nMichael Sahota, \nsoftware-craftsmanship-promotes-competence-culture\n\n\nOsherove, R., The Art of Unit Testing, 2009\n\n\nMeszaros, G., xUnit Test Patterns, 2007\n\n\nBeck, K., Test Driven Development by Example, 2002\n\n\nFowler, M. Beck, K., Refactoring, 1999\n\n\nOsherove, R., Iserializable \u2013 \nRoy Osherove Blog\n\n\nMeszaros, G., \nxunix patterns\n\n\nKniberg, H., Scrum and Xp from the trenches, 2007\n\n\nSucci et al., eXtreme Programming eXamined, 2001\n\n\nFeathers, C., Working Effectively with Legacy Code, 2004\n\n\nHunt, A. et al., The Pragmatic Programmer, 1999",
            "title": "Bibliography"
        },
        {
            "location": "/bibliography/#by-apiumtech-and-justdigital-core-developers",
            "text": "What are the benefits of TDD in software development?  (Xavi Hidalgo)  How to become a software developer  (Xavi Hidalgo)  5 best Jenkins plugins recommended by our team  (Xavi Hidalgo)  A day at the Test Academy event in Barcelona  (Xavi Hidalgo)  A framework to communicate: BDD  (Xavi Hidalgo)  Agile development in 2017  (Xavi Hidalgo)  Of Gods and Procrastination. Agile management.  (R.P.)  Testing tips for beginners in Agile testing  (Xavi Hidalgo)  Functional debt vs. technical debt in software development  (R.P.)  BDD: User Interface Testing  (Xavi Hidalgo)  Less Is More \u2013 Minimum Viable Product  (Xavi Hidalgo)  User stories: what you should know  (Dieu Le)  Keep calm & hide your code: code encapsulation.  (R.P.)  On the way to Continuous Integration (CI)   (Xavi Hidalgo)",
            "title": "By Apiumtech and JustDigital core developers"
        },
        {
            "location": "/bibliography/#by-community",
            "text": "Michael Sahota,  software-craftsmanship-promotes-competence-culture  Osherove, R., The Art of Unit Testing, 2009  Meszaros, G., xUnit Test Patterns, 2007  Beck, K., Test Driven Development by Example, 2002  Fowler, M. Beck, K., Refactoring, 1999  Osherove, R., Iserializable \u2013  Roy Osherove Blog  Meszaros, G.,  xunix patterns  Kniberg, H., Scrum and Xp from the trenches, 2007  Succi et al., eXtreme Programming eXamined, 2001  Feathers, C., Working Effectively with Legacy Code, 2004  Hunt, A. et al., The Pragmatic Programmer, 1999",
            "title": "By Community"
        },
        {
            "location": "/about/reviewers/",
            "text": "Reviewers\n\u00b6\n\n\nThe following people have reviewed this document (date and commit they reviewed in parentheses):\n\n\nXavi Hidalgo (12/15/2017 first)\n\n\nContributors\n\u00b6\n\n\nWe have learn and seek information from those awesome projects to make the Working Software Site.\n\n\nThose are the contributors:\n\n\n\n\n@heynickc \nAwesome DDD",
            "title": "Reviewers"
        },
        {
            "location": "/about/reviewers/#reviewers",
            "text": "The following people have reviewed this document (date and commit they reviewed in parentheses):  Xavi Hidalgo (12/15/2017 first)",
            "title": "Reviewers"
        },
        {
            "location": "/about/reviewers/#contributors",
            "text": "We have learn and seek information from those awesome projects to make the Working Software Site.  Those are the contributors:   @heynickc  Awesome DDD",
            "title": "Contributors"
        },
        {
            "location": "/about/license/",
            "text": "Copyright 2017 Working Software Best Practices Authors\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "title": "License"
        },
        {
            "location": "/about/contributing/",
            "text": "We welcome all contributions - send a pull request or open an issue. When possible, send different pull requests by section/topic.\n\n\nFeel free to peruse the \nopen issues\n for ideas which need to be expanded on a bit here.\n\n\nEditing and Submitting changes\n\u00b6\n\n\n\n\nFork the repo\n\n\nMake changes to the markdown files in the \ndocs directory\n of the master branch\n\n\nSubmit a Pull Request\n\n\n\n\nAudience\n\u00b6\n\n\nWrite for an full-stack developer\n\n\nStyle Guidelines\n\u00b6\n\n\nGeneral\n\u00b6\n\n\n\n\nFavor succinctness in writing\n\n\nUse max 3-4 sentences in a section (exceptions can be made when critical)\n\n\nShow, don\u2019t tell (examples speak more than lengthy exposition)\n\n\nInclude a simple, illustrative example rather than complex examples that require substantial, extraneous reading\n\n\nAdd a source link to the original document when available\n\n\nCreate new sections when warranted\n\n\nKeep code lines under 80 characters when possible\n\n\nMark code\n as insecure, bad, good where relevant\n\n\nUse the format of the \nAirbnb Javascript Style guide\n as a starting point\n\n\n\n\nRecommendations Section\n\u00b6\n\n\n\n\nAlways favor a declarative tip starting with a verb for the section title\n\n\nInclude good and bad examples, when possible\n\n\nEnsure each subsection has an anchor tag for future hyperlinking\n\n\n\n\nAttacks Section\n\u00b6\n\n\n\n\nProvide an example - then point to a recommendation for the solution in the relevant section of the doc\n\n\nList first/most visible attack, where possible\n\n\nEnsure each subsection has an anchor tag for future hyperlinking\n\n\nMark vulnerable pieces of code as \n// INSECURE",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#editing-and-submitting-changes",
            "text": "Fork the repo  Make changes to the markdown files in the  docs directory  of the master branch  Submit a Pull Request",
            "title": "Editing and Submitting changes"
        },
        {
            "location": "/about/contributing/#audience",
            "text": "Write for an full-stack developer",
            "title": "Audience"
        },
        {
            "location": "/about/contributing/#style-guidelines",
            "text": "",
            "title": "Style Guidelines"
        },
        {
            "location": "/about/contributing/#general",
            "text": "Favor succinctness in writing  Use max 3-4 sentences in a section (exceptions can be made when critical)  Show, don\u2019t tell (examples speak more than lengthy exposition)  Include a simple, illustrative example rather than complex examples that require substantial, extraneous reading  Add a source link to the original document when available  Create new sections when warranted  Keep code lines under 80 characters when possible  Mark code  as insecure, bad, good where relevant  Use the format of the  Airbnb Javascript Style guide  as a starting point",
            "title": "General"
        },
        {
            "location": "/about/contributing/#recommendations-section",
            "text": "Always favor a declarative tip starting with a verb for the section title  Include good and bad examples, when possible  Ensure each subsection has an anchor tag for future hyperlinking",
            "title": "Recommendations Section"
        },
        {
            "location": "/about/contributing/#attacks-section",
            "text": "Provide an example - then point to a recommendation for the solution in the relevant section of the doc  List first/most visible attack, where possible  Ensure each subsection has an anchor tag for future hyperlinking  Mark vulnerable pieces of code as  // INSECURE",
            "title": "Attacks Section"
        }
    ]
}